import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  FlatList,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  RefreshControl,
  ScrollView,
  TextInput
} from 'react-native';
import { View, Text } from '@/components/Themed';
import { supabase } from '@/utils/supabase';
import { useTheme } from '@/providers/ThemeProvider';
import { useRouter } from 'expo-router';
import SearchInput from '@/components/SearchInput';
import ProductCard from '@/components/ProductCard';
import { Feather } from '@expo/vector-icons';
import _ from 'lodash';
import { formatDistanceToNow, parseISO } from 'date-fns';
import { th } from 'date-fns/locale';
import { toZonedTime } from 'date-fns-tz';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
type Costumes = {
  id: number;
  title: string;
  price: number;
  description: string;
  created_at: string;
  location: string;
  costume_images?: {
    image_url: string;
  }[];
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
const formatDate = (dateString: string) => {
  try {
    const utcDate = parseISO(dateString);
    const bangkokDate = toZonedTime(utcDate, 'Asia/Bangkok');
    const relativeTime = formatDistanceToNow(bangkokDate, {
      addSuffix: true,
      locale: th,
    });
    return relativeTime;
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
};

export default function Search() {
  const { theme } = useTheme();
  const router = useRouter();
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<Costumes[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [categories, setCategories] = useState<string[]>([
    '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞', '‡πÄ‡∏Å‡∏°', '‡∏Ñ‡∏≠‡∏™‡πÄ‡∏û‡∏•‡∏¢‡πå', '‡∏ä‡∏∏‡∏î‡πÑ‡∏ó‡∏¢', '‡∏ä‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
  ]);
  const [selectedCategory, setSelectedCategory] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [popularSearches, setPopularSearches] = useState<string[]>([
    '‡∏ä‡∏∏‡∏î‡πÑ‡∏ó‡∏¢', '‡∏Å‡∏¥‡πÇ‡∏°‡πÇ‡∏ô', '‡∏ä‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°', '‡∏Ñ‡∏≤‡πÅ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î‡∏±‡∏á'
  ]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Supabase
  const searchCostumes = async (searchText: string, category: string = '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') => {
    try {
      setIsSearching(true);
      
      let query = supabase
        .from('costumes')
        .select(`
          *,
          costume_images (
            image_url
          )
        `);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      if (searchText.trim() !== '') {
        query = query.ilike('title', `%${searchText}%`);
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      if (category !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå category ‡πÉ‡∏ô costumes
        query = query.eq('category', category);
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
      const { data, error } = await query.order('created_at', { ascending: false });

      if (error) throw error;

      setSearchResults(data || []);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (searchText.trim() !== '') {
        setRecentSearches(prev => {
          const updatedSearches = [searchText, ...prev.filter(item => item !== searchText)].slice(0, 5);
          return updatedSearches;
        });
      }
      
    } catch (error) {
      console.error('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    } finally {
      setIsSearching(false);
    }
  };

  // ‡πÉ‡∏ä‡πâ debounce ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  const debouncedSearch = _.debounce((text: string, category: string) => {
    searchCostumes(text, category);
  }, 500);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearch = (text: string) => {
    setSearchQuery(text);
    debouncedSearch(text, selectedCategory);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    searchCostumes(searchQuery, category);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleCostumePress = (costume: Costumes) => {
    router.push({
      pathname: '/productdetail',
      params: {
        id: costume.id,
        title: costume.title,
        price: costume.price,
        description: costume.description,
        image: costume.costume_images?.[0]?.image_url,
        created_at: costume.created_at,
        location: costume.location
      }
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const onRefresh = async () => {
    setRefreshing(true);
    await searchCostumes(searchQuery, selectedCategory);
    setRefreshing(false);
  };

  // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ search ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    searchCostumes('', '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  }, []);

  // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå Tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const SearchTag = ({ text, onPress }: { text: string; onPress: () => void }) => (
    <TouchableOpacity
      onPress={onPress}
      style={{
        backgroundColor: theme === 'dark' ? '#2D2D3A' : '#FFE6F5',
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 16,
        marginRight: 8,
        marginBottom: 8,
      }}
    >
      <Text style={{ color: theme === 'dark' ? '#FFA7D1' : '#FFA7D1' }}>{text}</Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView className="flex-1" style={{ backgroundColor: theme === 'dark' ? '#121212' : '#F8F8FC' }}>
      <View className="h-full">
        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
        <View className="px-4 py-4" style={{ backgroundColor: theme === 'dark' ? '#1E1E2D' : '#FFF' }}>
          <Text className="text-xl font-bold mb-4" style={{ color: theme === 'dark' ? '#FFA7D1' : '#FFA7D1' }}>
            ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </Text>
          
          {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
          <SearchInput
            initialQuery={searchQuery}
            onChangeText={handleSearch}
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∏‡∏î, ‡∏Ñ‡∏≤‡πÅ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó..."
          />
        </View>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        {isSearching ? (
          <View className="flex-1 justify-center items-center">
            <ActivityIndicator size="large" color="#FFA7D1" />
            <Text className="mt-3" style={{ color: theme === 'dark' ? '#FFF' : '#333' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</Text>
          </View>
        ) : (
          <FlatList
            ListHeaderComponent={() => (
              <View style={{ backgroundColor: 'transparent' }}>
                {/* ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
                <View className="pt-4" style={{ backgroundColor: 'transparent' }}>
                  <ScrollView
                    horizontal
                    showsHorizontalScrollIndicator={false}
                    contentContainerStyle={{ paddingHorizontal: 16, paddingBottom: 12 }}
                  >
                    {categories.map((category, index) => (
                      <TouchableOpacity
                        key={index}
                        style={{
                          paddingHorizontal: 16,
                          paddingVertical: 8,
                          borderRadius: 20,
                          marginRight: 8,
                          backgroundColor: selectedCategory === category
                            ? '#FFA7D1'
                            : theme === 'dark' ? '#2D2D3A' : '#FFE6F5',
                        }}
                        onPress={() => handleCategorySelect(category)}
                      >
                        <Text
                          style={{
                            color: selectedCategory === category
                              ? '#FFF'
                              : theme === 'dark' ? '#FFA7D1' : '#FFA7D1',
                            fontWeight: selectedCategory === category ? 'bold' : 'normal',
                          }}
                        >
                          {category}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                </View>

                {/* ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
                {!searchQuery && (
                  <View className="px-4 pt-2 pb-4" style={{ backgroundColor: 'transparent' }}>
                    {/* ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */}
                    {recentSearches.length > 0 && (
                      <View className="mb-4" style={{ backgroundColor: 'transparent' }}>
                        <View className="flex-row justify-between items-center mb-2" style={{ backgroundColor: 'transparent' }}>
                          <Text className="text-base font-semibold" style={{ color: theme === 'dark' ? '#FFF' : '#333' }}>
                            ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                          </Text>
                          <TouchableOpacity onPress={() => setRecentSearches([])}>
                            <Text style={{ color: '#FFA7D1' }}>‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
                          </TouchableOpacity>
                        </View>
                        <View className="flex-row flex-wrap" style={{ backgroundColor: 'transparent' }}>
                          {recentSearches.map((text, index) => (
                            <SearchTag
                              key={`recent-${index}`}
                              text={text}
                              onPress={() => {
                                setSearchQuery(text);
                                searchCostumes(text, selectedCategory);
                              }}
                            />
                          ))}
                        </View>
                      </View>
                    )}

                    {/* ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° */}
                    <View style={{ backgroundColor: 'transparent' }}>
                      <Text className="text-base font-semibold mb-2" style={{ color: theme === 'dark' ? '#FFF' : '#333' }}>
                        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
                      </Text>
                      <View className="flex-row flex-wrap" style={{ backgroundColor: 'transparent' }}>
                        {popularSearches.map((text, index) => (
                          <SearchTag
                            key={`popular-${index}`}
                            text={text}
                            onPress={() => {
                              setSearchQuery(text);
                              searchCostumes(text, selectedCategory);
                            }}
                          />
                        ))}
                      </View>
                    </View>
                  </View>
                )}

                {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
                {searchQuery && (
                  <View className="px-4 py-2" style={{ backgroundColor: 'transparent' }}>
                    <Text style={{ color: theme === 'dark' ? '#CCC' : '#666' }}>
                      ‡∏û‡∏ö {searchResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "{searchQuery}"
                    </Text>
                  </View>
                )}
              </View>
            )}
            data={searchResults}
            keyExtractor={(item) => `costume-${item.id}`}
            renderItem={({ item }) => (
              <ProductCard
                productname={item.title}
                productprice={`‡∏ø${item.price.toLocaleString()}`}
                productimage={item.costume_images?.[0]?.image_url || 'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg'}
                postDate={formatDate(item.created_at)}
                description={item.description}
                onPress={() => handleCostumePress(item)}
              />
            )}
            ItemSeparatorComponent={() => (
              <View
                className="h-[1px] mx-8"
                style={{ backgroundColor: theme === 'dark' ? '#333' : '#EEE' }}
              />
            )}
            ListEmptyComponent={() => (
              <View className="flex-1 justify-center items-center py-16">
                <Feather name="search" size={48} color={theme === 'dark' ? '#444' : '#DDD'} />
                <Text className="mt-4 text-center px-6" style={{ color: theme === 'dark' ? '#CCC' : '#666' }}>
                  {searchQuery
                    ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${searchQuery}"\n‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô`
                    : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô'}
                </Text>
              </View>
            )}
            refreshControl={
              <RefreshControl refreshing={refreshing} onRefresh={onRefresh} colors={['#FFA7D1']} />
            }
          />
        )}
      </View>
    </SafeAreaView>
  );
}